/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/simple-get";
exports.ids = ["vendor-chunks/simple-get"];
exports.modules = {

/***/ "(ssr)/./node_modules/simple-get/index.js":
/*!******************************************!*\
  !*** ./node_modules/simple-get/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = simpleGet\n\nvar concat = __webpack_require__(/*! simple-concat */ \"(ssr)/./node_modules/simple-concat/index.js\")\nvar http = __webpack_require__(/*! http */ \"http\")\nvar https = __webpack_require__(/*! https */ \"https\")\nvar once = __webpack_require__(/*! once */ \"(ssr)/./node_modules/once/once.js\")\nvar querystring = __webpack_require__(/*! querystring */ \"querystring\")\nvar decompressResponse = __webpack_require__(/*! decompress-response */ \"(ssr)/./node_modules/simple-get/node_modules/decompress-response/index.js\") // excluded from browser build\nvar url = __webpack_require__(/*! url */ \"url\")\n\nfunction simpleGet (opts, cb) {\n  opts = typeof opts === 'string' ? {url: opts} : Object.assign({}, opts)\n  cb = once(cb)\n\n  opts.headers = Object.assign({}, opts.headers)\n\n  Object.keys(opts.headers).forEach(function (h) {\n    if (h.toLowerCase() !== h) {\n      opts.headers[h.toLowerCase()] = opts.headers[h]\n      delete opts.headers[h]\n    }\n  })\n\n  if (opts.url) {\n    var loc = url.parse(opts.url)\n    if (loc.hostname) opts.hostname = loc.hostname\n    if (loc.port) opts.port = loc.port\n    if (loc.protocol) opts.protocol = loc.protocol\n    if (loc.auth) opts.auth = loc.auth\n    opts.path = loc.path\n    delete opts.url\n  }\n\n  if (opts.maxRedirects == null) opts.maxRedirects = 10\n  if (opts.method) opts.method = opts.method.toUpperCase()\n\n  var body\n  if (opts.body) {\n    body = opts.json && !isStream(opts.body) ? JSON.stringify(opts.body) : opts.body\n  } else if (opts.form) {\n    body = typeof opts.form === 'string' ? opts.form : querystring.stringify(opts.form)\n    opts.headers['content-type'] = 'application/x-www-form-urlencoded'\n  }\n  delete opts.body; delete opts.form\n\n  if (body) {\n    if (!opts.method) opts.method = 'POST'\n    if (!isStream(body)) opts.headers['content-length'] = Buffer.byteLength(body)\n    if (opts.json) opts.headers['content-type'] = 'application/json'\n  }\n\n  if (opts.json) opts.headers.accept = 'application/json'\n  if (!opts.headers['accept-encoding']) opts.headers['accept-encoding'] = 'gzip, deflate' // Prefer gzip\n\n  var originalHost = opts.hostname // hostname before potential redirect\n  var protocol = opts.protocol === 'https:' ? https : http // Support http/https urls\n  var req = protocol.request(opts, function (res) {\n    if (res.statusCode >= 300 && res.statusCode < 400 && 'location' in res.headers) {\n      opts.url = res.headers.location // Follow 3xx redirects\n      delete opts.headers.host // Discard `host` header on redirect (see #32)\n      res.resume() // Discard response\n\n      var redirectHost = url.parse(opts.url).hostname // eslint-disable-line node/no-deprecated-api\n      // If redirected host is different than original host, drop headers to prevent cookie leak (#73)\n      if (redirectHost !== null && redirectHost !== originalHost) {\n        delete opts.headers.cookie\n        delete opts.headers.authorization\n      }\n\n      if ((res.statusCode === 301 || res.statusCode === 302) && opts.method === 'POST') {\n        opts.method = 'GET' // On 301/302 redirect, change POST to GET (see #35)\n        delete opts.headers['content-length']\n        delete opts.headers['content-type']\n      }\n\n      if (opts.maxRedirects === 0) return cb(new Error('too many redirects'))\n      opts.maxRedirects -= 1\n      return simpleGet(opts, cb)\n    }\n\n    var tryUnzip = typeof decompressResponse === 'function' && opts.method !== 'HEAD'\n    cb(null, tryUnzip ? decompressResponse(res) : res)\n  })\n  req.on('timeout', function () {\n    req.abort()\n    cb(new Error('Request timed out'))\n  })\n  req.on('error', cb)\n\n  if (body && isStream(body)) body.on('error', cb).pipe(req)\n  else req.end(body)\n\n  return req\n}\n\nsimpleGet.concat = function (opts, cb) {\n  return simpleGet(opts, function (err, res) {\n    if (err) return cb(err)\n    concat(res, function (err, data) {\n      if (err) return cb(err)\n      if (opts.json) {\n        try {\n          data = JSON.parse(data.toString())\n        } catch (err) {\n          return cb(err, res, data)\n        }\n      }\n      cb(null, res, data)\n    })\n  })\n}\n\n;['get', 'post', 'put', 'patch', 'head', 'delete'].forEach(function (method) {\n  simpleGet[method] = function (opts, cb) {\n    if (typeof opts === 'string') opts = {url: opts}\n    opts.method = method.toUpperCase()\n    return simpleGet(opts, cb)\n  }\n})\n\nfunction isStream (obj) { return typeof obj.pipe === 'function' }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdldC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsa0VBQWU7QUFDcEMsV0FBVyxtQkFBTyxDQUFDLGtCQUFNO0FBQ3pCLFlBQVksbUJBQU8sQ0FBQyxvQkFBTztBQUMzQixXQUFXLG1CQUFPLENBQUMsK0NBQU07QUFDekIsa0JBQWtCLG1CQUFPLENBQUMsZ0NBQWE7QUFDdkMseUJBQXlCLG1CQUFPLENBQUMsc0dBQXFCO0FBQ3RELFVBQVUsbUJBQU8sQ0FBQyxnQkFBSzs7QUFFdkI7QUFDQSxxQ0FBcUMsV0FBVyxrQkFBa0I7QUFDbEU7O0FBRUEsaUNBQWlDOztBQUVqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0Esb0JBQW9COztBQUVwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLENBQUM7QUFDRDtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELDBCQUEwQiIsInNvdXJjZXMiOlsiL1VzZXJzL3BhbnphL0RvY3VtZW50cy9QZXJzb25hbFByb2plY3RzL3ByZWRpay9ub2RlX21vZHVsZXMvc2ltcGxlLWdldC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHNpbXBsZUdldFxuXG52YXIgY29uY2F0ID0gcmVxdWlyZSgnc2ltcGxlLWNvbmNhdCcpXG52YXIgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKVxudmFyIGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKVxudmFyIG9uY2UgPSByZXF1aXJlKCdvbmNlJylcbnZhciBxdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJylcbnZhciBkZWNvbXByZXNzUmVzcG9uc2UgPSByZXF1aXJlKCdkZWNvbXByZXNzLXJlc3BvbnNlJykgLy8gZXhjbHVkZWQgZnJvbSBicm93c2VyIGJ1aWxkXG52YXIgdXJsID0gcmVxdWlyZSgndXJsJylcblxuZnVuY3Rpb24gc2ltcGxlR2V0IChvcHRzLCBjYikge1xuICBvcHRzID0gdHlwZW9mIG9wdHMgPT09ICdzdHJpbmcnID8ge3VybDogb3B0c30gOiBPYmplY3QuYXNzaWduKHt9LCBvcHRzKVxuICBjYiA9IG9uY2UoY2IpXG5cbiAgb3B0cy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0cy5oZWFkZXJzKVxuXG4gIE9iamVjdC5rZXlzKG9wdHMuaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbiAoaCkge1xuICAgIGlmIChoLnRvTG93ZXJDYXNlKCkgIT09IGgpIHtcbiAgICAgIG9wdHMuaGVhZGVyc1toLnRvTG93ZXJDYXNlKCldID0gb3B0cy5oZWFkZXJzW2hdXG4gICAgICBkZWxldGUgb3B0cy5oZWFkZXJzW2hdXG4gICAgfVxuICB9KVxuXG4gIGlmIChvcHRzLnVybCkge1xuICAgIHZhciBsb2MgPSB1cmwucGFyc2Uob3B0cy51cmwpXG4gICAgaWYgKGxvYy5ob3N0bmFtZSkgb3B0cy5ob3N0bmFtZSA9IGxvYy5ob3N0bmFtZVxuICAgIGlmIChsb2MucG9ydCkgb3B0cy5wb3J0ID0gbG9jLnBvcnRcbiAgICBpZiAobG9jLnByb3RvY29sKSBvcHRzLnByb3RvY29sID0gbG9jLnByb3RvY29sXG4gICAgaWYgKGxvYy5hdXRoKSBvcHRzLmF1dGggPSBsb2MuYXV0aFxuICAgIG9wdHMucGF0aCA9IGxvYy5wYXRoXG4gICAgZGVsZXRlIG9wdHMudXJsXG4gIH1cblxuICBpZiAob3B0cy5tYXhSZWRpcmVjdHMgPT0gbnVsbCkgb3B0cy5tYXhSZWRpcmVjdHMgPSAxMFxuICBpZiAob3B0cy5tZXRob2QpIG9wdHMubWV0aG9kID0gb3B0cy5tZXRob2QudG9VcHBlckNhc2UoKVxuXG4gIHZhciBib2R5XG4gIGlmIChvcHRzLmJvZHkpIHtcbiAgICBib2R5ID0gb3B0cy5qc29uICYmICFpc1N0cmVhbShvcHRzLmJvZHkpID8gSlNPTi5zdHJpbmdpZnkob3B0cy5ib2R5KSA6IG9wdHMuYm9keVxuICB9IGVsc2UgaWYgKG9wdHMuZm9ybSkge1xuICAgIGJvZHkgPSB0eXBlb2Ygb3B0cy5mb3JtID09PSAnc3RyaW5nJyA/IG9wdHMuZm9ybSA6IHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShvcHRzLmZvcm0pXG4gICAgb3B0cy5oZWFkZXJzWydjb250ZW50LXR5cGUnXSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG4gIH1cbiAgZGVsZXRlIG9wdHMuYm9keTsgZGVsZXRlIG9wdHMuZm9ybVxuXG4gIGlmIChib2R5KSB7XG4gICAgaWYgKCFvcHRzLm1ldGhvZCkgb3B0cy5tZXRob2QgPSAnUE9TVCdcbiAgICBpZiAoIWlzU3RyZWFtKGJvZHkpKSBvcHRzLmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10gPSBCdWZmZXIuYnl0ZUxlbmd0aChib2R5KVxuICAgIGlmIChvcHRzLmpzb24pIG9wdHMuaGVhZGVyc1snY29udGVudC10eXBlJ10gPSAnYXBwbGljYXRpb24vanNvbidcbiAgfVxuXG4gIGlmIChvcHRzLmpzb24pIG9wdHMuaGVhZGVycy5hY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbidcbiAgaWYgKCFvcHRzLmhlYWRlcnNbJ2FjY2VwdC1lbmNvZGluZyddKSBvcHRzLmhlYWRlcnNbJ2FjY2VwdC1lbmNvZGluZyddID0gJ2d6aXAsIGRlZmxhdGUnIC8vIFByZWZlciBnemlwXG5cbiAgdmFyIG9yaWdpbmFsSG9zdCA9IG9wdHMuaG9zdG5hbWUgLy8gaG9zdG5hbWUgYmVmb3JlIHBvdGVudGlhbCByZWRpcmVjdFxuICB2YXIgcHJvdG9jb2wgPSBvcHRzLnByb3RvY29sID09PSAnaHR0cHM6JyA/IGh0dHBzIDogaHR0cCAvLyBTdXBwb3J0IGh0dHAvaHR0cHMgdXJsc1xuICB2YXIgcmVxID0gcHJvdG9jb2wucmVxdWVzdChvcHRzLCBmdW5jdGlvbiAocmVzKSB7XG4gICAgaWYgKHJlcy5zdGF0dXNDb2RlID49IDMwMCAmJiByZXMuc3RhdHVzQ29kZSA8IDQwMCAmJiAnbG9jYXRpb24nIGluIHJlcy5oZWFkZXJzKSB7XG4gICAgICBvcHRzLnVybCA9IHJlcy5oZWFkZXJzLmxvY2F0aW9uIC8vIEZvbGxvdyAzeHggcmVkaXJlY3RzXG4gICAgICBkZWxldGUgb3B0cy5oZWFkZXJzLmhvc3QgLy8gRGlzY2FyZCBgaG9zdGAgaGVhZGVyIG9uIHJlZGlyZWN0IChzZWUgIzMyKVxuICAgICAgcmVzLnJlc3VtZSgpIC8vIERpc2NhcmQgcmVzcG9uc2VcblxuICAgICAgdmFyIHJlZGlyZWN0SG9zdCA9IHVybC5wYXJzZShvcHRzLnVybCkuaG9zdG5hbWUgLy8gZXNsaW50LWRpc2FibGUtbGluZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpXG4gICAgICAvLyBJZiByZWRpcmVjdGVkIGhvc3QgaXMgZGlmZmVyZW50IHRoYW4gb3JpZ2luYWwgaG9zdCwgZHJvcCBoZWFkZXJzIHRvIHByZXZlbnQgY29va2llIGxlYWsgKCM3MylcbiAgICAgIGlmIChyZWRpcmVjdEhvc3QgIT09IG51bGwgJiYgcmVkaXJlY3RIb3N0ICE9PSBvcmlnaW5hbEhvc3QpIHtcbiAgICAgICAgZGVsZXRlIG9wdHMuaGVhZGVycy5jb29raWVcbiAgICAgICAgZGVsZXRlIG9wdHMuaGVhZGVycy5hdXRob3JpemF0aW9uXG4gICAgICB9XG5cbiAgICAgIGlmICgocmVzLnN0YXR1c0NvZGUgPT09IDMwMSB8fCByZXMuc3RhdHVzQ29kZSA9PT0gMzAyKSAmJiBvcHRzLm1ldGhvZCA9PT0gJ1BPU1QnKSB7XG4gICAgICAgIG9wdHMubWV0aG9kID0gJ0dFVCcgLy8gT24gMzAxLzMwMiByZWRpcmVjdCwgY2hhbmdlIFBPU1QgdG8gR0VUIChzZWUgIzM1KVxuICAgICAgICBkZWxldGUgb3B0cy5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddXG4gICAgICAgIGRlbGV0ZSBvcHRzLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddXG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRzLm1heFJlZGlyZWN0cyA9PT0gMCkgcmV0dXJuIGNiKG5ldyBFcnJvcigndG9vIG1hbnkgcmVkaXJlY3RzJykpXG4gICAgICBvcHRzLm1heFJlZGlyZWN0cyAtPSAxXG4gICAgICByZXR1cm4gc2ltcGxlR2V0KG9wdHMsIGNiKVxuICAgIH1cblxuICAgIHZhciB0cnlVbnppcCA9IHR5cGVvZiBkZWNvbXByZXNzUmVzcG9uc2UgPT09ICdmdW5jdGlvbicgJiYgb3B0cy5tZXRob2QgIT09ICdIRUFEJ1xuICAgIGNiKG51bGwsIHRyeVVuemlwID8gZGVjb21wcmVzc1Jlc3BvbnNlKHJlcykgOiByZXMpXG4gIH0pXG4gIHJlcS5vbigndGltZW91dCcsIGZ1bmN0aW9uICgpIHtcbiAgICByZXEuYWJvcnQoKVxuICAgIGNiKG5ldyBFcnJvcignUmVxdWVzdCB0aW1lZCBvdXQnKSlcbiAgfSlcbiAgcmVxLm9uKCdlcnJvcicsIGNiKVxuXG4gIGlmIChib2R5ICYmIGlzU3RyZWFtKGJvZHkpKSBib2R5Lm9uKCdlcnJvcicsIGNiKS5waXBlKHJlcSlcbiAgZWxzZSByZXEuZW5kKGJvZHkpXG5cbiAgcmV0dXJuIHJlcVxufVxuXG5zaW1wbGVHZXQuY29uY2F0ID0gZnVuY3Rpb24gKG9wdHMsIGNiKSB7XG4gIHJldHVybiBzaW1wbGVHZXQob3B0cywgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgaWYgKGVycikgcmV0dXJuIGNiKGVycilcbiAgICBjb25jYXQocmVzLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKVxuICAgICAgaWYgKG9wdHMuanNvbikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEudG9TdHJpbmcoKSlcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIGNiKGVyciwgcmVzLCBkYXRhKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjYihudWxsLCByZXMsIGRhdGEpXG4gICAgfSlcbiAgfSlcbn1cblxuO1snZ2V0JywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2hlYWQnLCAnZGVsZXRlJ10uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIHNpbXBsZUdldFttZXRob2RdID0gZnVuY3Rpb24gKG9wdHMsIGNiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSAnc3RyaW5nJykgb3B0cyA9IHt1cmw6IG9wdHN9XG4gICAgb3B0cy5tZXRob2QgPSBtZXRob2QudG9VcHBlckNhc2UoKVxuICAgIHJldHVybiBzaW1wbGVHZXQob3B0cywgY2IpXG4gIH1cbn0pXG5cbmZ1bmN0aW9uIGlzU3RyZWFtIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmoucGlwZSA9PT0gJ2Z1bmN0aW9uJyB9XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/simple-get/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/simple-get/node_modules/decompress-response/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/simple-get/node_modules/decompress-response/index.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst mimicResponse = __webpack_require__(/*! mimic-response */ \"(ssr)/./node_modules/mimic-response/index.js\");\n\nmodule.exports = response => {\n\t// TODO: Use Array#includes when targeting Node.js 6\n\tif (['gzip', 'deflate'].indexOf(response.headers['content-encoding']) === -1) {\n\t\treturn response;\n\t}\n\n\tconst unzip = zlib.createUnzip();\n\tconst stream = new PassThrough();\n\n\tmimicResponse(response, stream);\n\n\tunzip.on('error', err => {\n\t\tif (err.code === 'Z_BUF_ERROR') {\n\t\t\tstream.end();\n\t\t\treturn;\n\t\t}\n\n\t\tstream.emit('error', err);\n\t});\n\n\tresponse.pipe(unzip).pipe(stream);\n\n\treturn stream;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdldC9ub2RlX21vZHVsZXMvZGVjb21wcmVzcy1yZXNwb25zZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLG9CQUFvQix5REFBNkI7QUFDakQsYUFBYSxtQkFBTyxDQUFDLGtCQUFNO0FBQzNCLHNCQUFzQixtQkFBTyxDQUFDLG9FQUFnQjs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9wYW56YS9Eb2N1bWVudHMvUGVyc29uYWxQcm9qZWN0cy9wcmVkaWsvbm9kZV9tb2R1bGVzL3NpbXBsZS1nZXQvbm9kZV9tb2R1bGVzL2RlY29tcHJlc3MtcmVzcG9uc2UvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUGFzc1Rocm91Z2ggPSByZXF1aXJlKCdzdHJlYW0nKS5QYXNzVGhyb3VnaDtcbmNvbnN0IHpsaWIgPSByZXF1aXJlKCd6bGliJyk7XG5jb25zdCBtaW1pY1Jlc3BvbnNlID0gcmVxdWlyZSgnbWltaWMtcmVzcG9uc2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXNwb25zZSA9PiB7XG5cdC8vIFRPRE86IFVzZSBBcnJheSNpbmNsdWRlcyB3aGVuIHRhcmdldGluZyBOb2RlLmpzIDZcblx0aWYgKFsnZ3ppcCcsICdkZWZsYXRlJ10uaW5kZXhPZihyZXNwb25zZS5oZWFkZXJzWydjb250ZW50LWVuY29kaW5nJ10pID09PSAtMSkge1xuXHRcdHJldHVybiByZXNwb25zZTtcblx0fVxuXG5cdGNvbnN0IHVuemlwID0gemxpYi5jcmVhdGVVbnppcCgpO1xuXHRjb25zdCBzdHJlYW0gPSBuZXcgUGFzc1Rocm91Z2goKTtcblxuXHRtaW1pY1Jlc3BvbnNlKHJlc3BvbnNlLCBzdHJlYW0pO1xuXG5cdHVuemlwLm9uKCdlcnJvcicsIGVyciA9PiB7XG5cdFx0aWYgKGVyci5jb2RlID09PSAnWl9CVUZfRVJST1InKSB7XG5cdFx0XHRzdHJlYW0uZW5kKCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0c3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcblx0fSk7XG5cblx0cmVzcG9uc2UucGlwZSh1bnppcCkucGlwZShzdHJlYW0pO1xuXG5cdHJldHVybiBzdHJlYW07XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/simple-get/node_modules/decompress-response/index.js\n");

/***/ })

};
;