"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/web3-providers-ipc";
exports.ids = ["vendor-chunks/web3-providers-ipc"];
exports.modules = {

/***/ "(ssr)/./node_modules/web3-providers-ipc/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/web3-providers-ipc/lib/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file index.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar errors = (__webpack_require__(/*! web3-core-helpers */ \"(ssr)/./node_modules/web3-core-helpers/lib/index.js\").errors);\nvar oboe = __webpack_require__(/*! oboe */ \"(ssr)/./node_modules/oboe/dist/oboe-node.js\");\nvar IpcProvider = function IpcProvider(path, net) {\n    var _this = this;\n    this.responseCallbacks = {};\n    this.notificationCallbacks = [];\n    this.path = path;\n    this.connected = false;\n    this.connection = net.connect({ path: this.path });\n    this.addDefaultEvents();\n    // LISTEN FOR CONNECTION RESPONSES\n    var callback = function (result) {\n        /*jshint maxcomplexity: 6 */\n        var id = null;\n        // get the id which matches the returned id\n        if (Array.isArray(result)) {\n            result.forEach(function (load) {\n                if (_this.responseCallbacks[load.id])\n                    id = load.id;\n            });\n        }\n        else {\n            id = result.id;\n        }\n        // notification\n        if (!id && result.method.indexOf('_subscription') !== -1) {\n            _this.notificationCallbacks.forEach(function (callback) {\n                if (typeof callback === 'function')\n                    callback(result);\n            });\n            // fire the callback\n        }\n        else if (_this.responseCallbacks[id]) {\n            _this.responseCallbacks[id](null, result);\n            delete _this.responseCallbacks[id];\n        }\n    };\n    // use oboe.js for Sockets\n    if (net.constructor.name === 'Socket') {\n        oboe(this.connection)\n            .done(callback);\n    }\n    else {\n        this.connection.on('data', function (data) {\n            _this._parseResponse(data.toString()).forEach(callback);\n        });\n    }\n};\n/**\nWill add the error and end event to timeout existing calls\n\n@method addDefaultEvents\n*/\nIpcProvider.prototype.addDefaultEvents = function () {\n    var _this = this;\n    this.connection.on('connect', function () {\n        _this.connected = true;\n    });\n    this.connection.on('close', function () {\n        _this.connected = false;\n    });\n    this.connection.on('error', function () {\n        _this._timeout();\n    });\n    this.connection.on('end', function () {\n        _this._timeout();\n    });\n    this.connection.on('timeout', function () {\n        _this._timeout();\n    });\n};\n/**\n Will parse the response and make an array out of it.\n\n NOTE, this exists for backwards compatibility reasons.\n\n @method _parseResponse\n @param {String} data\n */\nIpcProvider.prototype._parseResponse = function (data) {\n    var _this = this, returnValues = [];\n    // DE-CHUNKER\n    var dechunkedData = data\n        .replace(/\\}[\\n\\r]?\\{/g, '}|--|{') // }{\n        .replace(/\\}\\][\\n\\r]?\\[\\{/g, '}]|--|[{') // }][{\n        .replace(/\\}[\\n\\r]?\\[\\{/g, '}|--|[{') // }[{\n        .replace(/\\}\\][\\n\\r]?\\{/g, '}]|--|{') // }]{\n        .split('|--|');\n    dechunkedData.forEach(function (data) {\n        // prepend the last chunk\n        if (_this.lastChunk)\n            data = _this.lastChunk + data;\n        var result = null;\n        try {\n            result = JSON.parse(data);\n        }\n        catch (e) {\n            _this.lastChunk = data;\n            // start timeout to cancel all requests\n            clearTimeout(_this.lastChunkTimeout);\n            _this.lastChunkTimeout = setTimeout(function () {\n                _this._timeout();\n                throw errors.InvalidResponse(data);\n            }, 1000 * 15);\n            return;\n        }\n        // cancel timeout and set chunk to null\n        clearTimeout(_this.lastChunkTimeout);\n        _this.lastChunk = null;\n        if (result)\n            returnValues.push(result);\n    });\n    return returnValues;\n};\n/**\nGet the adds a callback to the responseCallbacks object,\nwhich will be called if a response matching the response Id will arrive.\n\n@method _addResponseCallback\n*/\nIpcProvider.prototype._addResponseCallback = function (payload, callback) {\n    var id = payload.id || payload[0].id;\n    var method = payload.method || payload[0].method;\n    this.responseCallbacks[id] = callback;\n    this.responseCallbacks[id].method = method;\n};\n/**\nTimeout all requests when the end/error event is fired\n\n@method _timeout\n*/\nIpcProvider.prototype._timeout = function () {\n    for (var key in this.responseCallbacks) {\n        if (this.responseCallbacks.hasOwnProperty(key)) {\n            this.responseCallbacks[key](errors.InvalidConnection('on IPC'));\n            delete this.responseCallbacks[key];\n        }\n    }\n};\n/**\n Try to reconnect\n\n @method reconnect\n */\nIpcProvider.prototype.reconnect = function () {\n    this.connection.connect({ path: this.path });\n};\nIpcProvider.prototype.send = function (payload, callback) {\n    // try reconnect, when connection is gone\n    if (!this.connection.writable)\n        this.connection.connect({ path: this.path });\n    this.connection.write(JSON.stringify(payload));\n    this._addResponseCallback(payload, callback);\n};\n/**\nSubscribes to provider events.provider\n\n@method on\n@param {String} type    'notification', 'connect', 'error', 'end' or 'data'\n@param {Function} callback   the callback to call\n*/\nIpcProvider.prototype.on = function (type, callback) {\n    if (typeof callback !== 'function')\n        throw new Error('The second parameter callback must be a function.');\n    switch (type) {\n        case 'data':\n            this.notificationCallbacks.push(callback);\n            break;\n        // adds error, end, timeout, connect\n        default:\n            this.connection.on(type, callback);\n            break;\n    }\n};\n/**\n Subscribes to provider events.provider\n\n @method on\n @param {String} type    'connect', 'error', 'end' or 'data'\n @param {Function} callback   the callback to call\n */\nIpcProvider.prototype.once = function (type, callback) {\n    if (typeof callback !== 'function')\n        throw new Error('The second parameter callback must be a function.');\n    this.connection.once(type, callback);\n};\n/**\nRemoves event listener\n\n@method removeListener\n@param {String} type    'data', 'connect', 'error', 'end' or 'data'\n@param {Function} callback   the callback to call\n*/\nIpcProvider.prototype.removeListener = function (type, callback) {\n    var _this = this;\n    switch (type) {\n        case 'data':\n            this.notificationCallbacks.forEach(function (cb, index) {\n                if (cb === callback)\n                    _this.notificationCallbacks.splice(index, 1);\n            });\n            break;\n        default:\n            this.connection.removeListener(type, callback);\n            break;\n    }\n};\n/**\nRemoves all event listeners\n\n@method removeAllListeners\n@param {String} type    'data', 'connect', 'error', 'end' or 'data'\n*/\nIpcProvider.prototype.removeAllListeners = function (type) {\n    switch (type) {\n        case 'data':\n            this.notificationCallbacks = [];\n            break;\n        default:\n            this.connection.removeAllListeners(type);\n            break;\n    }\n};\n/**\nResets the providers, clears all callbacks\n\n@method reset\n*/\nIpcProvider.prototype.reset = function () {\n    this._timeout();\n    this.notificationCallbacks = [];\n    this.connection.removeAllListeners('error');\n    this.connection.removeAllListeners('end');\n    this.connection.removeAllListeners('timeout');\n    this.addDefaultEvents();\n};\n/**\n * Returns the desired boolean.\n *\n * @method supportsSubscriptions\n * @returns {boolean}\n */\nIpcProvider.prototype.supportsSubscriptions = function () {\n    return true;\n};\nmodule.exports = IpcProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-providers-ipc/lib/index.js\n");

/***/ })

};
;